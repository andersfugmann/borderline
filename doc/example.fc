# Example firewall

# Zone definitions

zone EXT1 {
     ip = 1.2.3.4;
     netmask = 255.255.255.0;
     routed = true; // global.

     policy = deny; // Packets entering or leaving?
};

define aax {
       ddfe;
       sdfe;
       sdfsdf;
       sdfe;
};

zone ext1 {
   rule {
     insert aax;
     src.zone = ext1;
     src.ip = 1.2.3.4 / 233.244.245.233;
     dst.zone = ext2;
     src.port = 3443;
     protocol = TCP;
     policy = allow;
  }
};



# Predifined rules must be inserted into any context.
# Name sequence of rules....
# Rules can be written within rules

#Rules can be nested.
#Rules can be named.

Zone definitions

zone ext {
     ip = a.b.c.d;
     device = eth0;
     netmask = 255.255.255.0;
}


set forward {
   rule {
      state = new;
      rule {
	  source zone = ext;
          source ip = ..
	  ext_forward; // All these rules are applied only if filters matches.
	  policy drop;
      }
      rule {
	  source zone = int;
	  int_forward;
	  policy drop;
      }
      policy drop;
   }
}


User file:

define ext_forward {
}

define int_forward {
}

#How do I write rule A and B?
#Can I overwrite a policy
Are rule definitions complete rules, or just


rule {
     src.ip = a.b.c.d;
     dsr.ip = w.x.y.z;
     policy = allow;
}

If a rule matches, then all rules are examined.
If no policy is applied, then use the policy for the rule given (if any)
Repeat for all rules, untill a policy is applied to the packet.


To which chain should the rule be added?
Chains:
mangle, input, forward, output, nat


set_type = mangle | input | forward | output | nat
set = set <set_type> rule_seq

rule = rule { filter_rule_seq policy_opt }

filter_rule_seq = [E] | filter | rule


rule_seq     = { rule_seq_opt }
rule_seq_opt = [E] | rule rule_seq_opt



stm = <zone> | <set>





Let the machine have a "local" zone. No zones then need input/output rules. Marvolous!


