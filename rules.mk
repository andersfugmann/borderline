## Generic functions for ocaml makefile
## This makefile compiles ocaml binaries using ocamlfind.
## Dependancies are generated by looking at dependancy files generated by
## ocamldep.

vpath %.cmo $(BUILD_DIR)
vpath %.cmi $(BUILD_DIR)
vpath %.cmx $(BUILD_DIR)
vpath %.o $(BUILD_DIR)
vpath gendep $(BUILD_DIR)
vpath % $(BUILD_DIR)

CP = cp
OCAMLC = ocamlc
OCAMLOPT = ocamlopt
BUILD_DEP = gendep

SOURCES := $(sort $(filter %.mli %.ml, $(SOURCES)) $(MLLS:.mll=.ml) $(MLYS:.mly=.mli) $(MLYS:.mly=.ml))

#MAKEFLAGS = --no-print-directory
SHELL := bash
BINARY_DEPS := $(addprefix $(BUILD_DIR)/, $(addsuffix .d, $(BINARIES)))
GRAMMER_FILES = $(LEX_FILES:.mll=.ml) $(YACC_FILES:.mly=.mli) $(YACC_FILES:.mly=.ml)

OCAMLFIND_ARGS = $(addprefix -I $(BUILD_DIR)/,$(INCLUDE)) -package "$(PACKAGES)"
ifdef SYNTAX
  PPFLAGS += -syntax $(SYNTAX)
  ifdef SYNTAX_EXT
    PPFLAGS += $(addprefix -ppopt $(BUILD_DIR)/,$(SYNTAX_EXT))
    BUILD_DEP += $(SYNTAX_EXT)
  endif
endif

#TARGET := $(strip $(TARGET))
ifeq ($(TARGET), bytecode)
  COMPILE_SUFFIX = .cmo
  OCFLAGS += -custom
  LD=ocamlc
else ifeq ($(TARGET), optimized)
  COMPILE_SUFFIX = .cmx
  OCAMLDEP_FLAGS += -native
  LD=ocamlopt
else ifeq ($(TARGET), profile)
  COMPILE_SUFFIX = .cmo
  OCAMLC = ocamlcp
  LD=ocamlcp
else ifeq ($(TARGET), profile-opt)
  COMPILE_SUFFIX =.cmx
  OCAMLDEP_FLAGS += -native
  LD=ocamlopt
  OCFLAGS += -p
  OCAMLC = ocamlopt
else
  $(error "Unknown compilation target: $(TARGET)")
endif

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
$(foreach dir,$(INCLUDE),$(shell mkdir -p $(BUILD_DIR)/$(dir)))
-include $(BINARY_DEPS)
endif
endif

.PHONY: build clean doc force

force:

.DELETE_ON_ERROR: %.d


ifdef SYNTAX_EXT
$(SYNTAX_EXT): PPFLAGS :=
$(SYNTAX_EXT): OCAMLFIND_ARGS := $(addprefix -I $(BUILD_DIR)/,$(INCLUDE)) -syntax camlp4o -package camlp4.extend,camlp4.gramlib,camlp4.quotations
$(SYNTAX_EXT): OCFLAGS := -annot -g
endif

$(BINARY_DEPS): $(BUILD_DIR)/%.d: $(BUILD_DIR)/%.ml.d $(BUILD_DEP) $(GRAMMER_FILES)
	@echo "Depend:  " $(subst $(BUILD_DIR)/,,$@)
	@mkdir -p $(dir $@)
	@TMP_FILE=$$(mktemp /tmp/ocaml_build.XXXXXXXX) && $(BUILD_DIR)/gendep -prefix $(BUILD_DIR) -suffix $(COMPILE_SUFFIX) $(subst $(BUILD_DIR)/,,$(@:.d=)) > $${TMP_FILE} && mv -f $${TMP_FILE} $@

$(BUILD_DIR)/%.d: % $(BUILD_DEP)
	@echo "Depend:  " $(subst $(BUILD_DIR)/,,$@)
	@mkdir -p $(dir $@)
	@TMP_FILE=$$(mktemp /tmp/ocaml_build.XXXXXXXX) && ocamlfind ocamldep $(OCAMLDEP_FLAGS) $(addprefix -I ,$(INCLUDE) $(dir $<)) $(PPFLAGS) -package "$(PACKAGES)" $< > $${TMP_FILE} && mv -f $${TMP_FILE} $@

gendep.%: PPFLAGS =

%.cmx: %.ml
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLOPT) -c $(OCFLAGS) $(OCAMLFIND_ARGS) $(PPFLAGS) $< -o $(BUILD_DIR)/$@

%.cmo: %.ml
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLC) -c $(OCFLAGS) $(OCAMLFIND_ARGS) $(PPFLAGS) $< -o $(BUILD_DIR)/$@

%.cmi: %.mli
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLC) -c $(OCFLAGS) $(OCAMLFIND_ARGS) $(PPFLAGS) $< -o $(BUILD_DIR)/$@

%.inferred: %.ml
	@ocamlfind $(OCAMLC) -i $(OCFLAGS) $(PPFLAGS) $(OCAMLFIND_ARGS) $<

%.ml: %.mll
	@echo "Lexer:   " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamllex -q $<

%.ml %.mli: %.mly
	@echo "Parser:  " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlyacc $<

%.o: %.c
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind ocamlopt -c -cclib "$(addprefix -l, $(CLIBS))" -ccopt "$(CFLAGS)" $<
	@mv $(notdir $@) $(BUILD_DIR)/$@

gendep: gendep.ml
	@echo "Link:    " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(LD) $(OCFLAGS) -package str,batteries $< -linkpkg -o $(BUILD_DIR)/$@

$(BINARIES): %: $(OBJECTS)
	@echo "Link:    " $(subst $(BUILD_DIR),,$@)
	@mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(LD) $(OCFLAGS) $(OCAMLFIND_ARGS) -ccopt "$(CFLAGS)" -linkpkg -o $(BUILD_DIR)/$@ $(addprefix $(BUILD_DIR)/, $(subst $(BUILD_DIR)/,,$+)) -cclib "$(addprefix -l , $(CLIBS))"
#(OBJECTS) $(addprefix $(BUILD_DIR)/, $($@_objs))

clean::
	@echo "Clean."
	@find $(BUILD_DIR) -name \*.d -o -name \*.cm? -o -name \*.o | xargs $(RM)
	-@$(RM) -r $(BUILD_DIR) $(BIN_DIR) $(DOC_DIR) $(GRAMMER_FILES)

doc: U := $(shell (for s in $(basename $(SOURCES)); do echo $$s; done) | sort | uniq)
doc: SOURCES := $(wildcard $(addsuffix .ml*, $(U)))
doc:
	@echo "Documentation"
	@echo U: $(U)
	@mkdir -p $(DOC_DIR)
	@ocamlfind ocamldoc -thread -html -sort -rectypes -hide-warnings $(PPFLAGS) -d $(DOC_DIR) $(addprefix -I $(BUILD_DIR)/,$(INCLUDE)) -package "$(PACKAGES)" $(SOURCES)

$(BUILD_DIR)/targets.makefile: Makefile rules.mk
	@mkdir -p $(BUILD_DIR)
	@(for BIN in $(BINARIES); do \
	    printf "\$${BIN_DIR}/$$(basename $${BIN}): $${BIN}\n"; \
	    printf "\t@[ -d \$${BIN_DIR} ] || mkdir -p \$${BIN_DIR}\n"; \
	    printf "\t@echo \"Install: \" \$$@\n"; \
	    printf "\t@install $(BUILD_DIR)/$${BIN} \$$@\n"; \
	    printf "\n"; \
	done) > $@

install:: $(addprefix $(BIN_DIR)/, $(notdir $(BINARIES)))

-include $(BUILD_DIR)/targets.makefile
