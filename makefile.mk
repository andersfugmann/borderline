## Generic functions for ocaml makefile
## This makefile compiles ocaml binaries using ocamlfind.
## Dependancies are generated by looking at dependancy files generated by 
## ocamldep.

vpath %.cmo $(BUILD_DIR)
vpath %.cmi $(BUILD_DIR)
vpath %.cmx $(BUILD_DIR)
vpath %.o $(BUILD_DIR)
vpath gendep $(BUILD_DIR)
vpath % $(BUILD_DIR)

SOURCES := $(sort $(filter %.mli %.ml, $(SOURCES)) $(MLLS:.mll=.ml) $(MLYS:.mly=.mli) $(MLYS:.mly=.ml))  

#MAKEFLAGS = --no-print-directory
SHELL := bash
BINARY_DEPS := $(addprefix $(BUILD_DIR)/, $(addsuffix .d, $(BINARIES)))
GRAMMER_FILES = $(LEX_FILES:.mll=.ml) $(YACC_FILES:.mly=.mli) $(YACC_FILES:.mly=.ml)  

OCAMLFIND_ARGS = $(addprefix -I $(BUILD_DIR)/,$(INCLUDE)) -package "$(PACKAGES)" 

#TARGET := $(strip $(TARGET))
ifeq ($(TARGET), bytecode)
  COMPILE_SUFFIX = .cmo
  OCAMLC = ocamlc
else ifeq ($(TARGET), optimized)
  COMPILE_SUFFIX = .cmx
  OCAMLC = ocamlopt
  OCAMLDEP_FLAGS += -native
else ifeq ($(TARGET), profile)
  COMPILE_SUFFIX = .cmo
  OCAMLC = ocamlcp
else ifeq ($(TARGET), profile-opt)
  COMPILE_SUFFIX =.cmx
  OCAMLC = ocamlopt
  OCFLAGS += -p
  OCAMLDEP_FLAGS += -native
else
  $(error "Unknown compilation target: $(TARGET)")
endif

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
$(foreach dir,$(INCLUDE),$(shell mkdir -p $(BUILD_DIR)/$(dir)))
-include $(DEPENDS) $(BINARY_DEPS)
endif
endif

.PHONY: install clean doc force

force:



#.DELETE_ON_ERROR: $(DEPENDS) $(BINARY_DEPENDS) $(BINARIES)
$(BINARY_DEPS): $(BUILD_DIR)/%.d: $(BUILD_DIR)/%.ml.d gendep $(GRAMMER_FILES)
	@echo "Depend:  " $(subst $(BUILD_DIR)/,,$@)
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	@$(BUILD_DIR)/gendep -prefix $(BUILD_DIR) -suffix $(COMPILE_SUFFIX) $(subst $(BUILD_DIR)/,,$(@:.d=)) > $@

$(BUILD_DIR)/%.d: %
	@echo "Depend:  " $(subst $(BUILD_DIR)/,,$@)
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	@ocamlfind ocamldep $(OCAMLDEP_FLAGS) $(addprefix -I ,$(INCLUDE) $(dir $<)) -package "$(PACKAGES)" $< > $@

gendep.cmo: OCFLAGS += -rectypes
gendep.cmx: OCFLAGS += -rectypes
%.cmx: %.ml 
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLC) -c $(OCFLAGS) $(OCAMLFIND_ARGS) $< -o $(BUILD_DIR)/$@

%.cmo: %.ml 
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLC) -c $(OCFLAGS) $(OCAMLFIND_ARGS) $< -o $(BUILD_DIR)/$@


%.cmi: %.mli
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLC) -c $(OCFLAGS) $(OCAMLFIND_ARGS) $< -o $(BUILD_DIR)/$@

%.inferred: %.ml
	@ocamlfind $(OCAMLC) -i $(OCFLAGS) $(OCAMLFIND_ARGS) $< 

%.ml: %.mll
	@echo "Lexer:   " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamllex -q $<

%.ml %.mli: %.mly
	@echo "Parser:  " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlyacc $<

%.o: %.c
	@echo "Compile: " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLC) -c $(OCFLAGS) -cclib "$(addprefix -l, $(CLIBS))" -ccopt "$(CFLAGS)" $< 
	@mv $(notdir $@) $(BUILD_DIR)/$@

gendep: gendep.cmx
	@echo "Link:    " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind ocamlopt $(OCFLAGS) -package str -rectypes $(BUILD_DIR)/gendep.cmx -linkpkg -o $(BUILD_DIR)/$@

$(BINARIES): %: $(OBJECTS)
	@echo "Link:    " $(subst $(BUILD_DIR),,$@)
	@[ -d $(BUILD_DIR)/$(dir $@) ] || mkdir -p $(BUILD_DIR)/$(dir $@)
	@ocamlfind $(OCAMLC) $(OCFLAGS) $(OCAMLFIND_ARGS) -cclib "$(addprefix -l , $(CLIBS))" -ccopt "$(CFLAGS)" -linkpkg -o $(BUILD_DIR)/$@ $(addprefix $(BUILD_DIR)/, $(subst $(BUILD_DIR)/,,$+))
#(OBJECTS) $(addprefix $(BUILD_DIR)/, $($@_objs))

clean::
	@echo "Clean."
	@find $(BUILD_DIR) -name \*.d -o -name \*.cm? -o -name \*.o | xargs $(RM) 
	@$(RM) -r $(BUILD_DIR) $(BIN_DIR) $(DOC_DIR) $(GRAMMER_FILES)

doc: $(subst .ml,.cmo,$(filter %.ml, $(SOURCES))) $(subst .mli,.cmi,$(filter %.mli, $(SOURCES))) 
	@echo "Documentation"
	@[ -d $(DOC_DIR) ] || mkdir $(DOC_DIR)
	@ocamlfind ocamldoc -html -d $(DOC_DIR) $(addprefix -I $(BUILD_DIR)/,$(INCLUDE)) -package "$(PACKAGES)" $(SOURCES)


# A bit dodgy. We autogenerate a makefile to include dynamic rules 
$(BUILD_DIR)/targets.makefile: makefile.mk
	@[ -d $(BUILD_DIR) ] || mkdir -p $(BUILD_DIR)
	@(for BIN in $(BINARIES); do \
	    printf "$(BIN_DIR)/$$(basename $${BIN}): $${BIN}\n"; \
	    printf "\t@[ -d $(BIN_DIR) ] || mkdir -p $(BIN_DIR)\n"; \
	    printf "\t@echo \"Install: \" \$$@\n"; \
	    printf "\t@\$$(CP) $(BUILD_DIR)/$${BIN} \$$@\n"; \
	    printf "\n"; \
	done) > $@
install:: $(addprefix $(BIN_DIR)/, $(notdir $(BINARIES)))

-include $(BUILD_DIR)/targets.makefile

