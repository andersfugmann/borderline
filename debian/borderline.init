#!/bin/bash
### BEGIN INIT INFO
# Provides:          borderline
# Required-Start:    $local_fs $remote_fs $syslog
# Required-Stop:     $local_fs $remote_fs $syslog
# Default-Start:     S
# Default-Stop:
# Short-Description: A firewall compiler
# Description:       Generates a packet filtering firewall.
### END INIT INFO

# Author: Anders Peter Fugmann <afu@fugmann.net>

set -e

MAIN=/etc/borderline/borderline.bl
if [ -f /etc/default/borderline ]; then
    source /etc/default/borderline
fi

if [ "${DONT_START}" = "1" ]; then
    echo "Borderline is not yet configured."
    echo "After configuration, set DONT_START=0 in"
    echo "/etc/default/borderline".
    echo
    echo "For first time configuration, run bl_configure and "
    echo "then adjust /etc/borderline/configuration.bl"
    exit 0
fi

if [ \! -f "${MAIN}" ]; then
    echo "Invalid or not input file given: ${MAIN}"
    exit 1
fi

NFT="/usr/sbin/nft"
BORDERLINE="/usr/sbin/borderline"

function flush () {
    ${NFT} flush table borderline
}

function panic () {
    FILE=$(mktemp -t borderline.XXXXXX)
    cat <<EOF > ${FILE}
table inet borderline { }
flush table inet borderline
delete table inet borderline
table inet borderline {
  comment "Appled: $(date)"
  chain input { type filter hook input priority 0; policy drop; }
  chain output { type filter hook output priority 0; policy drop; }
  chain forward { type filter hook forward priority 0; policy drop; }
}

EOF
    ${NFT} -f ${FILE}
    RES=$?
    rm -f ${FILE}
    return $?
}

function apply () {
    echo "Generating firewall rules."
    FILE=$(mktemp -t borderline.XXXXXX)
    LOG=$(mktemp -t borderline.XXXXXX)
    chmod 600 ${FILE}
    cat <<EOF > ${FILE}
table inet borderline { }
flush table inet borderline
delete table inet borderline
table inet borderline {
  comment "Appled: $(date)"
}
EOF
    ${BORDERLINE} ${MAIN} >> ${FILE}
    ${NFT} -c -o -f ${FILE} > ${LOG} 2>&1
    RES=$?
    if [ ${RES} -eq 0 ]; then
        ${NFT} -o -f ${FILE} > /dev/null 2>&1
        echo "Borderline firewall applied"
    else
        cat ${LOG} > /dev/stderr
    fi
    rm -f ${FILE} ${LOG}
    return $?
}

case $1 in
    "start" | "restart" | "reload")
        echo "Starting borderline"
        apply
        ;;
    "panic")
        echo "Closing network access"
        panic
        ;;
    "flush")
        echo "Claring all rules."
        echo "**** SYSTEM IS INSECURE ****"
        flush
        ;;
    "status")
        ${NFT} list ruleset
        ;;
    "stop")
        echo "Not stopping. Use flush or panic."
        ;;
    *)
        echo "Use $0 <start|restart|reload|panic|flush|status>"
esac
