define validate = rule {
    rule { state = invalid; } policy { log_invalid };
    rule {
        state = [ new, untracked ];

        # For RFC's for each icmpv6 type, see
        # https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml#icmpv6-parameters-codes-type-160
        # This could be made more precise to filter
        # source and destination address spaces, but its expected
        # that the kernel is hardend and will filter those packets.
        # Filtering on hublimit basd on RFC's and making sure none of the messages gets routed
        # should be enough.
        rule {
            address family = ipv6;
            protocol = [ ipv6-icmp ];
            destination zone = self;
            rule {
                icmp6 = [ router-solicitation-6,
                          router-advertisement-6,
                          neighbor-solicitation-6,
                          neighbor-advertisement-6,
                          redirect-message-6,
                          indirect-neighbor-solicit-6,
                          inverse-neighbor-discovery-advertisement-message-6 ];
                hoplimit != 255;
            } policy log_invalid;
            rule {
                icmp6 = [ multicast-listener-discovery2-6,
                          multicast-listener-query-6,
                          multicast-listener-done-6,
                          multicast-listener-report-6,
                          multicast-router-advertisement-6,
                          multicast-router-termination-6,
                          multicast-router-solicitation-6 ];
                hoplimit != 1;
            } policy log_invalid;
        };
        rule {
            tcpflags != "SYN" / [ "SYN", "ACK", "FIN", "RST" ];
        } policy { log_invalid };

        # Bogons
        rule {
            use block_global_bogons; #if
            rule {
                source zone = global_zones;
                rule {
                    source address = bogon6;
                } policy { log_bogon };
                rule {
                    source address != ipv4_multicast;
                    source address = bogon4;
                } policy { log_bogon };
                rule {
                    source address = ipv4_private_networks;
                } policy { log_bogon };
            };
            rule {
                destination zone = global_zones;
                rule {
                    destination address = bogon6;
                } policy { log_bogon };
                rule {
                    destination address != ipv4_multicast;
                    destination address = bogon4;
                } policy { log_bogon };
                rule {
                    destination address = ipv4_private_networks;
                } policy { log_bogon };
            };
        };

        # Iana rules
        rule {
            # Only consider networks mentioned in the iana tables
            source address = [ ipv4_iana_all, ipv6_iana_all ];
            rule { source address != [ ipv4_iana_source, ipv6_iana_source ] } policy { log_invalid };
            rule {
                # Ip addresses allowed forwaring.
                source zone != self;
                destination zone != self;
                rule { source address != [ ipv4_iana_forwardable, ipv6_iana_forwardable ] } policy { log_invalid };
                rule {
                    destination zone = global_zones;
                    rule { source address != [ ipv4_iana_global, ipv6_iana_global ] } policy { log_invalid };
                };
                rule {
                    source zone = global_zones;
                    rule { destination address != [ ipv4_iana_global, ipv6_iana_global ] } policy { log_invalid };
                };
            };
        };
        rule {
            #filter destination addresses
            # Only consider networks mentioned in the iana tables
            destination address = [ ipv4_iana_all, ipv6_iana_all ];
            rule { destination address != [ ipv4_iana_destination, ipv6_iana_destination ] } policy { log_invalid };
            rule {
                source zone != self;
                destination zone != self;
                rule { destination address != [ ipv4_iana_forwardable, ipv6_iana_forwardable ] } policy { log_invalid };
                rule {
                    destination zone = global_zones;
                    rule { destination address != [ ipv4_iana_global, ipv6_iana_global ] } policy { log_invalid };
                };
                rule {
                    source zone = global_zones;
                    rule { destination address != [ ipv4_iana_global, ipv6_iana_global ] } policy { log_invalid };
                };
            };
        };
    };
}
