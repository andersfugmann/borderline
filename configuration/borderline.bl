# Copyright 2009 Anders Fugmann.
# Distributed under the GNU General Public License v3
#
# This file is part of Borderline - A Firewall Generator
#
# Borderline is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# Borderline is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Borderline.  If not, see <http://www.gnu.org/licenses/>.

import "./configuration.bl"
import "./generic"
import "./zones"

process filter {
        rule {
             # Drop any martian packets
             rule { src zone = mars; } policy log_deny;
             rule { dst zone = mars; } policy log_deny;

             rule { state = related, established; } policy log_allow;

             # All bogons to and from external zones are filtered
             rule {
                 use bogons; #if
                 rule {
                   src zone = external;
                   source address = bogon;
                 } policy log_deny;

                 rule {
                     dst zone = external;
                     dst address = bogon;
                 } policy log_deny;
             };

             # Allow roulter information for fe80 networks
             rule { use link_address; #if
                    src zone != external;
                    dst zone != external;
                    source address = fe80::/64;
                    destination address = fe80::/64;
                    icmptype = router-solicitation, router-advertisement, neighbor-solicitation, neighbor-advertisement, redirect;
             } policy log_allow;
             rule { state = new;
                    use common;
                    use zones;
             } policy log_deny;
             rule { state = invalid; } policy log_deny;
        } policy log_deny;
} policy { log "Missed packet"; deny; }


